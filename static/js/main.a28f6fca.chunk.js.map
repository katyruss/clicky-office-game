{"version":3,"sources":["api/characters.js","components/friendcard/friendcard.js","components/header/header.js","components/main/main.js","components/jumbotron/jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Employees","name","img","clicked","FriendCard","props","react_default","a","createElement","className","onClick","e","_handleClick","src","Header","Component","this","score","topScore","Jumbotron","App","state","clickedImages","chars","handleIncorrect","_this","setState","handleTopScore","_this$state","shuffleData","data","i","length","j","Math","floor","random","temp","includes","concat","Object","toConsumableArray","_this2","header_header","jumbotron_jumbotron","map","person","friendcard_FriendCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a28f6fca.chunk.js","sourcesContent":["const Employees = [{\n    name: 'Andy',\n    img: \"../../assets/images/andy.jpeg\",\n    clicked: false,\n}, {\n    name: 'Angela',\n    img: \"../../assets/images/angela.jpeg\",\n    clicked: false,\n}, {\n    name: 'Dwight',\n    img: \"../../assets/images/dwight.jpeg\",\n    clicked: false,\n}, {\n    name: 'Jim',\n    img: \"../../assets/images/jim.jpeg\",\n    clicked: false,\n}, {\n    name: 'Kevin',\n    img: \"../../assets/images/kevin.jpeg\",\n    clicked: false,\n}, {\n    name: 'Michael',\n    img: \"../../assets/images/michael.jpeg\",\n    clicked: false,\n}, {\n    name: 'Pam',\n    img: \"../../assets/images/pam.jpeg\",\n    clicked: false,\n}, {\n    name: 'Stanley',\n    img: \"../../assets/images/stanley.jpeg\",\n    clicked: false,\n}, {\n    name: 'Toby',\n    img: \"../../assets/images/toby.jpeg\",\n    clicked: false,\n}]\n\nexport default Employees;","import React from \"react\";\n\nexport const FriendCard = (props) => (\n    <div className=\"coolPic\" onClick={(e) => props._handleClick(props.name)}>\n        <img src={props.img} />\n        <p>{props.name}</p>\n    </div>\n)\n\nexport default FriendCard;","import React, {\n    Component\n} from \"react\"\nimport \"./header.css\"\n\nclass Header extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-light bg-light background\">\n                <span className=\"navbar-brand mb-0 h1\">Do You Remember \"The Office\"?</span>\n                <span className=\"navbar-brand mb-0 h1\">Score: {this.props.score} | Top Score: {this.props.topScore}</span>\n            </nav>\n        )\n    }\n\n\n\n}\n\nexport default Header;","import React, {\n    Component\n} from \"react\"\nimport \"./main.css\"\nimport Employees from \"../../api/characters\";\nimport { FriendCard } from \"../friendcard/friendcard\"\n\nclass Main extends Component {\n\n    render() {\n        return (\n            <div>\n                <h1>Home</h1>\n            </div>\n        )\n    }\n\n\n\n}\n\nexport default Main;","import React from \"react\";\nimport \"./jumbotron.css\";\n\nconst Jumbotron = () => (\n    <div className=\"jumbotron\">\n        <h1>Office Clicky Game!</h1>\n        <h2>Click on any image to earn a point, but don't click on the same image more than once.</h2>\n    </div>\n);\nexport default Jumbotron;","\nimport React, { Component } from 'react';\n\nimport Main from './components/main/main';\nimport Footer from './components/footer/footer';\nimport Header from './components/header/header';\nimport './App.css';\nimport Employees from \"./api/characters\"\nimport Jumbotron from './components/jumbotron/jumbotron';\nimport { FriendCard } from \"./components/friendcard/friendcard\"\n\nclass App extends Component {\n  state = {\n    clickedImages: [],\n    score: 0,\n    topScore: 0,\n    chars: []\n  }\n\n  componentWillMount() {\n    this.setState({ chars: Employees })\n  }\n\n  handleIncorrect = () => {\n    this.setState({ clickedImages: [], score: 0 })\n\n  }\n\n  handleTopScore = () => {\n    let { score, topScore } = this.state\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n\n      })\n    }\n  }\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    this.setState({ chars: data })\n    return data;\n  };\n\n  _handleClick = (e) => {\n    if (this.state.clickedImages.includes(e)) {\n      this.handleIncorrect()\n    } else {\n      this.setState({ clickedImages: [...this.state.clickedImages, e], score: this.state.score + 1 }, () => {\n        this.handleTopScore()\n        this.shuffleData(this.state.chars)\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore} />\n        <Jumbotron />\n        {this.state.chars ? this.state.chars.map((person, i) => (\n          <div>\n            <FriendCard key={i} img={person.img} _handleClick={this._handleClick} name={person.name} />\n          </div>\n        )) : <h1>Nope</h1>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\"New content is available; please refresh.\");\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}